{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["ConnectionFactory","stores","version","dbName","connection","close","Error","Promise","resolve","reject","request","window","indexedDB","open","onupgradeneeded","_createStores","event","target","result","onsuccess","bind","onerror","error","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;AAAA,IAAIA,oBAAqB,YAAY;AACjC,QAAMC,SAAS,CAAC,aAAD,CAAf;AACA,QAAMC,UAAU,CAAhB;AACA,QAAMC,SAAS,OAAf;;AAEA,QAAIC,aAAa,IAAjB;;AAEA,QAAIC,QAAQ,IAAZ;;AAEA;AACI,qCAAc;AAAA;;AACV,kBAAM,IAAIC,KAAJ,CAAU,6CAAV,CAAN;AACH;;AAHL;AAAA;AAAA,4CAK2B;AACnB,uBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,wBAAIC,UAAUC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBV,MAAtB,EAA8BD,OAA9B,CAAd;;AAEAQ,4BAAQI,eAAR,GAA0B,iBAAS;AAC/Bd,0CAAkBe,aAAlB,CAAgCC,MAAMC,MAAN,CAAaC,MAA7C;AACH,qBAFD;;AAIAR,4BAAQS,SAAR,GAAoB,iBAAS;;AAEzB,4BAAI,CAACf,UAAL,EAAgB;AACZA,yCAAaY,MAAMC,MAAN,CAAaC,MAA1B;AACAb,oCAAQD,WAAWC,KAAX,CAAiBe,IAAjB,CAAsBhB,UAAtB,CAAR;AACAA,uCAAWC,KAAX,GAAmB,YAAU;AACzB,sCAAM,IAAIC,KAAJ,CAAU,mCAAV,CAAN;AACH,6BAFD;AAGH;AACDE,gCAAQJ,UAAR;AACH,qBAVD;;AAYAM,4BAAQW,OAAR,GAAkB,iBAAS;AACvBZ,+BAAOO,MAAMC,MAAN,CAAaK,KAApB;AACH,qBAFD;AAGH,iBAtBM,CAAP;AAuBH;AA7BL;AAAA;AAAA,0CA+ByBlB,UA/BzB,EA+BqC;AAC7BH,uBAAOsB,OAAP,CAAe,iBAAS;AACpB,wBAAInB,WAAWoB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAJ,EAAiD;AAC7CtB,mCAAWuB,iBAAX,CAA6BD,KAA7B;AACH;;AAEDtB,+BAAWwB,iBAAX,CAA6BF,KAA7B,EAAoC,EAAEG,eAAe,IAAjB,EAApC;AACH,iBAND;AAOH;AAvCL;AAAA;AAAA,8CAyC4B;AACpB,oBAAIzB,UAAJ,EAAe;AACXC;AACAD,iCAAa,IAAb;AACH;AACJ;AA9CL;;AAAA;AAAA;AAiDH,CA1DuB,EAAxB","file":"ConnectionFactory.js","sourcesContent":["var ConnectionFactory = (function () {\r\n    const stores = ['negociacoes'];\r\n    const version = 4;\r\n    const dbName = 'banco';\r\n\r\n    var connection = null;\r\n\r\n    var close = null;\r\n\r\n    return class ConnectionFactory {\r\n        constructor() {\r\n            throw new Error(\"Não é possivel instanciar ConnectionFactory\");\r\n        }\r\n\r\n        static getConnection() {\r\n            return new Promise((resolve, reject) => {\r\n                let request = window.indexedDB.open(dbName, version);\r\n\r\n                request.onupgradeneeded = event => {\r\n                    ConnectionFactory._createStores(event.target.result);\r\n                };\r\n\r\n                request.onsuccess = event => {\r\n                    \r\n                    if (!connection){\r\n                        connection = event.target.result\r\n                        close = connection.close.bind(connection);\r\n                        connection.close = function(){\r\n                            throw new Error(\"Não é possivel chamar este método\");\r\n                        }\r\n                    } \r\n                    resolve(connection);\r\n                };\r\n\r\n                request.onerror = event => {\r\n                    reject(event.target.error);\r\n                };\r\n            })\r\n        }\r\n\r\n        static _createStores(connection) {\r\n            stores.forEach(store => {\r\n                if (connection.objectStoreNames.contains(store)) {\r\n                    connection.deleteObjectStore(store);\r\n                }\r\n\r\n                connection.createObjectStore(store, { autoIncrement: true });\r\n            });\r\n        }\r\n\r\n        static closeConnection(){\r\n            if (connection){\r\n                close();\r\n                connection = null;\r\n            }\r\n        }\r\n    }\r\n\r\n})();\r\n\r\n"]}