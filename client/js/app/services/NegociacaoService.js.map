{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["NegociacaoService","_http","HttpService","Promise","all","obtemNegociacoesSemana","obtemNegociacoesSemanaAnterior","obtemNegociacoesSemanaRetrasada","then","negociacoes","periodos","reduce","dados","periodo","concat","catch","console","log","erro","Error","get","map","Negociacao","Date","negociacao","data","quantidade","valor","error","ConnectionFactory","getConnection","NegociacaoDao","connection","dao","adiciona","listaTodos","apagaTodos","listaAtual","obterNegociacoes","filter","some","equals","negociacaoExistente"],"mappings":"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","file":"NegociacaoService.js","sourcesContent":["class NegociacaoService {\r\n    constructor() {\r\n        this._http = new HttpService();\r\n    }\r\n\r\n    obterNegociacoes() {\r\n\r\n        return Promise.all([\r\n            this.obtemNegociacoesSemana(),\r\n            this.obtemNegociacoesSemanaAnterior(),\r\n            this.obtemNegociacoesSemanaRetrasada()\r\n        ]).then(periodos => {\r\n            let negociacoes = periodos\r\n                .reduce((dados, periodo) => dados.concat(periodo), []);\r\n            return negociacoes;\r\n\r\n        }).catch(erro => {\r\n            console.log(erro);\r\n            throw new Error(\"Erro ao obter negociações\");\r\n        });\r\n\r\n    } \r\n\r\n    obtemNegociacoesSemana() {\r\n\r\n        return this._http.get('negociacoes/semana').\r\n            then(negociacoes =>\r\n                negociacoes.map(negociacao => new Negociacao(new Date(negociacao.data), negociacao.quantidade, negociacao.valor))\r\n            ).catch(error => {\r\n                console.log(error);\r\n                throw new Error(\"Erro ao buscar negociacoes da semana\");\r\n            });\r\n\r\n\r\n    }\r\n\r\n    obtemNegociacoesSemanaAnterior() {\r\n        return this._http.get('negociacoes/anterior').\r\n            then(negociacoes =>\r\n                negociacoes.map(negociacao => new Negociacao(new Date(negociacao.data), negociacao.quantidade, negociacao.valor))\r\n            ).catch(error => {\r\n                console.log(error);\r\n                throw new Error(\"Erro ao buscar negociacoes da semana anterior\");\r\n            });\r\n\r\n\r\n    }\r\n\r\n    obtemNegociacoesSemanaRetrasada() {\r\n        return this._http.get('negociacoes/retrasada').\r\n            then(negociacoes =>\r\n                negociacoes.map(negociacao => new Negociacao(new Date(negociacao.data), negociacao.quantidade, negociacao.valor))\r\n            ).catch(error => {\r\n                console.log(error);\r\n                throw new Error(\"Erro ao buscar negociacoes da semana retrasada\");\r\n            });\r\n\r\n\r\n    }\r\n\r\n    cadastra(negociacao){\r\n        \r\n        return ConnectionFactory.getConnection()\r\n            .then(connection => new NegociacaoDao(connection))\r\n            .then(dao => dao.adiciona(negociacao))\r\n            .catch(erro => { \r\n                throw new Error(erro);\r\n            });\r\n                \r\n           \r\n    }\r\n\r\n    lista(){\r\n\r\n        return ConnectionFactory.getConnection()\r\n            .then(connection => new NegociacaoDao(connection))\r\n            .then(dao => dao.listaTodos())\r\n            .catch(erro => { \r\n                console.log(erro)\r\n                throw new Error(erro);\r\n            });\r\n    }\r\n\r\n    apaga(){\r\n        return ConnectionFactory.getConnection()\r\n            .then(connection => new NegociacaoDao(connection).apagaTodos())\r\n            .catch(erro => {\r\n                throw new Error(erro);\r\n            });\r\n    }\r\n\r\n    importa(listaAtual){\r\n        return this.obterNegociacoes()\r\n            .then(negociacoes => {\r\n                return negociacoes = negociacoes.filter(negociacao =>\r\n                    !listaAtual.some(negociacaoExistente =>\r\n                        negociacao.equals(negociacaoExistente)));\r\n                \r\n            }).catch(error =>{\r\n                console.log(error);\r\n                throw new Error(\"Não foi possivel importar negociações\");\r\n            });\r\n    }\r\n}"]}